{"index":{"title":"it's me","links":[],"tags":[],"content":"hey there!\n","richContent":"&lt;p&gt;hey there!&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;./public-media/me.jpeg&quot; width=&quot;400&quot; height=&quot;auto&quot; alt=&quot;&quot;&gt;&lt;/p&gt;"},"interests/transit/nyc/R211T":{"title":"R211T","links":[],"tags":[],"content":"i managed to catch a ride on one of the MTA’s fancy new trains with open gangways!\n\n\nthey were quite snazzy and functional—i saw many people standing in the gangway while it was more crowded and rode just fine in it myself.\nbesides the open gangways, the most useful improvement i saw was the intricate wayfinding information displayed at each stop: where to find which staircases/elevators relative to one’s position. this convinced me that replacing the LED textual stop information with general purpose screens really is worth it.\n\ni saw these odd devices next to two of the doors (one on each side) on each car:\n\ni really could not figure out what their purpose is, even after searching online. if you have any idea, please let me know!\nhopefully they figure out a way to inspect between the cars so that it can run on the A as well.","richContent":"&lt;p&gt;i managed to catch a ride on one of the MTA’s fancy new trains with open gangways!\n&lt;img src=&quot;../../../public-media/trains/18A690FC-BF82-4D98-BD80-02BA5E0EFD55_1_105_c.jpeg&quot; width=&quot;400&quot; height=&quot;auto&quot; alt=&quot;&quot;&gt;\n&lt;img src=&quot;../../../public-media/trains/B92193B0-62FB-4974-BF28-BE17412ACA32_1_105_c.jpeg&quot; width=&quot;400&quot; height=&quot;auto&quot; alt=&quot;&quot;&gt;&lt;/p&gt;\n&lt;p&gt;they were quite snazzy and functional—i saw many people standing in the gangway while it was more crowded and rode just fine in it myself.&lt;/p&gt;\n&lt;p&gt;besides the open gangways, the most useful improvement i saw was the intricate wayfinding information displayed at each stop: where to find which staircases/elevators relative to one’s position. this convinced me that replacing the LED textual stop information with general purpose screens really is worth it.\n&lt;img src=&quot;../../../public-media/trains/11C79703-E128-4B9F-8EFE-571294A4C30F_1_105_c.jpeg&quot; width=&quot;400&quot; height=&quot;auto&quot; alt=&quot;&quot;&gt;&lt;/p&gt;\n&lt;p&gt;i saw these odd devices next to two of the doors (one on each side) on each car:\n&lt;img src=&quot;../../../public-media/trains/73E74488-A893-40CC-BDC3-2028C2A8E544_1_105_c.jpeg&quot; width=&quot;300&quot; height=&quot;auto&quot; alt=&quot;&quot;&gt;&lt;/p&gt;\n&lt;p&gt;i really could not figure out what their purpose is, even after searching online. if you have any idea, please let me know!&lt;/p&gt;\n&lt;p&gt;hopefully they figure out a way to inspect between the cars &lt;a href=&quot;https://gothamist.com/news/mtas-fancy-new-open-gangway-subway-trains-cant-run-on-express-tracks-per-memo&quot; class=&quot;external&quot;&gt;so that it can run on the A as well&lt;svg class=&quot;external-icon&quot; viewBox=&quot;0 0 512 512&quot;&gt;&lt;path d=&quot;M320 0H288V64h32 82.7L201.4 265.4 178.7 288 224 333.3l22.6-22.6L448 109.3V192v32h64V192 32 0H480 320zM32 32H0V64 480v32H32 456h32V480 352 320H424v32 96H64V96h96 32V32H160 32z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;.&lt;/p&gt;"},"posts/distance-audio-modulator":{"title":"distance audio modulator","links":[],"tags":[],"content":"recently, my friend zero told me an idea it had to add some crowd-mediated interactivity to a live show: measure how close together a particular few people are by looking at bluetooth signal strengths, then report that back to the synth to modulate some parameters.\nwe whittled that down to a simpler starting place: estimate distances to a few devices directly from the central laptop, then emit some midi CC values based on that. with some trial and error, we got that to work! here’s a little demo video:\n\nit’s pretty inconsistent and high latency, as you can tell. i bet if we wrote a little app that sent out bluetooth pings every 25ms we could probably address those, though of course with some tradeoff between the two.\nhere’s the python script we wrote:\nimport asyncio\nimport hashlib\n \nimport ipdb\nfrom bleak import BleakScanner\nimport mido\n \n \nNUM_CCS = 8\nBASE_CC = 70\n \nMIN_RSSI = 0x30\nMAX_RSSI = 0x60\n \ndef clamp(lo, hi, x):\n    if x &lt; lo:\n        return lo\n    elif x &gt; hi:\n        return hi\n    else:\n        return x\n \ndef scale(from_lo, from_hi, to_lo, to_hi, x):\n    return (clamp(from_lo, from_hi, x) - from_lo) / (from_hi - from_lo) * (to_hi - to_lo) + to_lo\n \ndef rssi_to_midi(rssi):\n    return round(scale(MIN_RSSI, MAX_RSSI, 0, 127, abs(rssi)))\n \ndef valid_ad(dev, ad):\n    return dev.name is not None and \\\n           dev.name.startswith(&#039;Jessie&#039;) and \\\n           ad.rssi is not None and \\\n           (ad.tx_power is None or ad.tx_power &lt; 50)\n \ndef update_cc(port, cc, val):\n    port.send(mido.Message(&#039;control_change&#039;, control=cc, value=val))\n \nasync def main():\n    port = mido.open_output()\n    cc_nums = {}\n    async with BleakScanner() as scanner:\n        async for bd, ad in scanner.advertisement_data():\n            if not valid_ad(bd, ad):\n                continue\n            if bd.address not in cc_nums:\n                if len(cc_nums) &lt; NUM_CCS:\n                    cc_nums[bd.address] = BASE_CC + len(cc_nums)\n                else:\n                    continue\n \n            val = rssi_to_midi(ad.rssi - (ad.tx_power or 8))\n            print(f&quot;{bd.name} -&gt; {val}&quot;)\n            update_cc(port, cc_nums[bd.address], val)\n \n \nif __name__ == &#039;__main__&#039;:\n    asyncio.run(main())\nif i/we work on it any more, i’ll put it in a repo somewhere","richContent":"&lt;p&gt;recently, my friend zero told me an idea it had to add some crowd-mediated interactivity to a live show: measure how close together a particular few people are by looking at bluetooth signal strengths, then report that back to the synth to modulate some parameters.&lt;/p&gt;\n&lt;p&gt;we whittled that down to a simpler starting place: estimate distances to a few devices directly from the central laptop, then emit some midi CC values based on that. with some trial and error, we got that to work! here’s a little demo video:\n&lt;video src=&quot;../public-media/midi_rssi_example.mov&quot; controls&gt;&lt;/video&gt;\nit’s pretty inconsistent and high latency, as you can tell. i bet if we wrote a little app that sent out bluetooth pings every 25ms we could probably address those, though of course with some tradeoff between the two.&lt;/p&gt;\n&lt;p&gt;here’s the python script we wrote:&lt;/p&gt;\n&lt;figure data-rehype-pretty-code-figure=&quot;&quot;&gt;&lt;pre tabindex=&quot;0&quot; data-language=&quot;python&quot; data-theme=&quot;github-dark github-light&quot;&gt;&lt;code data-language=&quot;python&quot; data-theme=&quot;github-dark github-light&quot; style=&quot;display: grid;&quot;&gt;&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; asyncio&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; hashlib&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt; &lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; ipdb&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;from&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; bleak &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; BleakScanner&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; mido&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt; &lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt; &lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;NUM_CCS&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt; 8&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;BASE_CC&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt; 70&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt; &lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;MIN_RSSI&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; 0x&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;30&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;MAX_RSSI&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; 0x&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;60&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt; &lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;def&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#B392F0;--shiki-light:#6F42C1&quot;&gt; clamp&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;(lo, hi, x):&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;    if&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; x &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;&amp;#x3C;&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; lo:&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;        return&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; lo&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;    elif&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; x &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; hi:&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;        return&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; hi&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;    else&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;:&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;        return&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; x&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt; &lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;def&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#B392F0;--shiki-light:#6F42C1&quot;&gt; scale&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;(from_lo, from_hi, to_lo, to_hi, x):&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;    return&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; (clamp(from_lo, from_hi, x) &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; from_lo) &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; (from_hi &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; from_lo) &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; (to_hi &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; to_lo) &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; to_lo&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt; &lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;def&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#B392F0;--shiki-light:#6F42C1&quot;&gt; rssi_to_midi&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;(rssi):&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;    return&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt; round&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;(scale(&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;MIN_RSSI&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;MAX_RSSI&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;127&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;abs&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;(rssi)))&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt; &lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;def&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#B392F0;--shiki-light:#6F42C1&quot;&gt; valid_ad&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;(dev, ad):&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;    return&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; dev.name &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;is&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; not&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt; None&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; and&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; \\&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;           dev.name.startswith(&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#9ECBFF;--shiki-light:#032F62&quot;&gt;&#039;Jessie&#039;&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;and&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; \\&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;           ad.rssi &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;is&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; not&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt; None&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; and&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; \\&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;           (ad.tx_power &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;is&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt; None&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; or&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; ad.tx_power &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;&amp;#x3C;&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt; 50&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;)&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt; &lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;def&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#B392F0;--shiki-light:#6F42C1&quot;&gt; update_cc&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;(port, cc, val):&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;    port.send(mido.Message(&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#9ECBFF;--shiki-light:#032F62&quot;&gt;&#039;control_change&#039;&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#FFAB70;--shiki-light:#E36209&quot;&gt;control&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;cc, &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#FFAB70;--shiki-light:#E36209&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;val))&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt; &lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;async&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; def&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#B392F0;--shiki-light:#6F42C1&quot;&gt; main&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;():&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;    port &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; mido.open_output()&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;    cc_nums &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; {}&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;    async&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; with&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; BleakScanner() &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;as&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; scanner:&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;        async&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; for&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; bd, ad &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; scanner.advertisement_data():&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;            if&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; not&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; valid_ad(bd, ad):&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;                continue&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;            if&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; bd.address &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;not&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; in&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; cc_nums:&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;                if&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt; len&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;(cc_nums) &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;&amp;#x3C;&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt; NUM_CCS&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;:&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;                    cc_nums[bd.address] &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt; BASE_CC&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; +&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt; len&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;(cc_nums)&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;                else&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;:&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;                    continue&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt; &lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;            val &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; rssi_to_midi(ad.rssi &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt; (ad.tx_power &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;or&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt; 8&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;))&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;            print&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;f&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#9ECBFF;--shiki-light:#032F62&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;bd.name&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#9ECBFF;--shiki-light:#032F62&quot;&gt; -&gt; &lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;val&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#9ECBFF;--shiki-light:#032F62&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;)&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;            update_cc(port, cc_nums[bd.address], val)&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt; &lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt; &lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#79B8FF;--shiki-light:#005CC5&quot;&gt; __name__&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#F97583;--shiki-light:#D73A49&quot;&gt; ==&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#9ECBFF;--shiki-light:#032F62&quot;&gt; &#039;__main__&#039;&lt;/span&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;:&lt;/span&gt;&lt;/span&gt;\n&lt;span data-line=&quot;&quot;&gt;&lt;span style=&quot;--shiki-dark:#E1E4E8;--shiki-light:#24292E&quot;&gt;    asyncio.run(main())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;\n&lt;p&gt;if i/we work on it any more, i’ll put it in a repo somewhere&lt;/p&gt;"},"projects/miscellanea/Zoom-G1Xon-control":{"title":"Zoom G1Xon control","links":[],"tags":[],"content":"these are notes from a project zero and i did to control the Zoom G1Xon guitar multi-effects pedal in real-time over USB.\nthere are various pieces of software to edit and store patches for Zoom pedals, but they’re not so great for real-time control. nonetheless, they contain lots of useful information. we got most of ours from this wonderful project page and some of the code linked from the home page of that wiki. the B1on is moooooostly the same as the G1Xon.\nthe pedal communicates with a USB host using MIDI SysEx and CC messages. as documented on that wiki page, most of the SysEx commands require a model ID specific to the pedal; while the B1on’s is 0x65, the G1Xon’s is 0x64. (you can find this out with the “Identify” command.) oddly, we found that some commands work with the incorrect model ID in the command, while others do not, so if you are having trouble with inconsistency, make sure you’re using the right model ID everywhere.\nwhen trying to receive data back from the pedal (whether for the Identify command, the Get(Current)Patch commands, or when receiving patch fragments when making changes on-device), make sure that you have enabled receiving SysEx messages with whatever midi driver you are using; rtmidi, for example, filters them out by default. (zero brought up this possibility when i was stumped.)\nyou need to turn on edit mode before doing much stuff, including before the pedal will send values back when edited on-device.\nfor our purposes, the most useful commands are those labeled FXM_OnOff and FXM_PN. the former enables/disables pedals and the latter changes pedals’ parameters. stripped of the SysEx header/footer, the latter message looks like this:\n52 00 64 31 ${pedalIndex} ${paramIndex} ${paramValueLow} ${paramValueHigh}\n\nhere, pedalIndex is the 0-indexed index of the pedal within the effects chain, paramIndex is the… 2(?)-indexed index of the parameter within the specific pedal, paramValueLow is the low 7 bits of the value, and paramValueHigh is the high 7 bits of the value. we found that the paramValue maps exactly onto the value shown on the device—there’s no hidden extra precision—so if a value is 0-100 on the device, you send 0-100.\nthe values/sliders/dials on the device’s display update in real-time when sending new parameter values, even for effects that normally can’t be edited on-device. it’s cute to see some of the little dials spin!","richContent":"&lt;p&gt;these are notes from a project zero and i did to control the Zoom G1Xon guitar multi-effects pedal in real-time over USB.&lt;/p&gt;\n&lt;p&gt;there are various pieces of software to edit and store patches for Zoom pedals, but they’re not so great for real-time control. nonetheless, they contain lots of useful information. we got most of ours from &lt;a href=&quot;https://github.com/shooking/ZoomPedalFun/wiki/De-re-B1On&quot; class=&quot;external&quot;&gt;this wonderful project page&lt;svg class=&quot;external-icon&quot; viewBox=&quot;0 0 512 512&quot;&gt;&lt;path d=&quot;M320 0H288V64h32 82.7L201.4 265.4 178.7 288 224 333.3l22.6-22.6L448 109.3V192v32h64V192 32 0H480 320zM32 32H0V64 480v32H32 456h32V480 352 320H424v32 96H64V96h96 32V32H160 32z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt; and some of the code linked from the home page of that wiki. the B1on is moooooostly the same as the G1Xon.&lt;/p&gt;\n&lt;p&gt;the pedal communicates with a USB host using MIDI SysEx and CC messages. as documented on that wiki page, most of the SysEx commands require a model ID specific to the pedal; while the B1on’s is 0x65, the G1Xon’s is 0x64. (you can find this out with the “Identify” command.) oddly, we found that some commands work with the incorrect model ID in the command, while others do not, so if you are having trouble with inconsistency, make sure you’re using the right model ID everywhere.&lt;/p&gt;\n&lt;p&gt;when trying to receive data back from the pedal (whether for the Identify command, the Get(Current)Patch commands, or when receiving patch fragments when making changes on-device), make sure that you have enabled receiving SysEx messages with whatever midi driver you are using; rtmidi, for example, filters them out by default. (zero brought up this possibility when i was stumped.)&lt;/p&gt;\n&lt;p&gt;you need to turn on edit mode before doing much stuff, including before the pedal will send values back when edited on-device.&lt;/p&gt;\n&lt;p&gt;for our purposes, the most useful commands are those labeled FXM_OnOff and FXM_PN. the former enables/disables pedals and the latter changes pedals’ parameters. stripped of the SysEx header/footer, the latter message looks like this:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;52 00 64 31 ${pedalIndex} ${paramIndex} ${paramValueLow} ${paramValueHigh}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;here, &lt;code&gt;pedalIndex&lt;/code&gt; is the 0-indexed index of the pedal within the effects chain, &lt;code&gt;paramIndex&lt;/code&gt; is the… 2(?)-indexed index of the parameter within the specific pedal, &lt;code&gt;paramValueLow&lt;/code&gt; is the low 7 bits of the value, and &lt;code&gt;paramValueHigh&lt;/code&gt; is the high 7 bits of the value. we found that the &lt;code&gt;paramValue&lt;/code&gt; maps exactly onto the value shown on the device—there’s no hidden extra precision—so if a value is 0-100 on the device, you send 0-100.&lt;/p&gt;\n&lt;p&gt;the values/sliders/dials on the device’s display update in real-time when sending new parameter values, even for effects that normally can’t be edited on-device. it’s cute to see some of the little dials spin!&lt;/p&gt;"},"projects/miscellanea/crashing-waves":{"title":"crashing waves","links":[],"tags":[],"content":"","richContent":"&lt;iframe width=&quot;500&quot; height=&quot;800&quot; source=&quot;https://jessie.grosen.systems/online-experiments/crashing-waves/&quot;&gt;&lt;/iframe&gt;"},"projects/mta-projection":{"title":"mta projection","links":[],"tags":[],"content":"\nlink to project\nwhy is a map different from a diagram? i recently heard the MTA’s typical subway map described as a bit of a misnomer, because its lack of strict adherence to physical layout instead makes it a diagram.\n\nwhat if we stubbornly held that this is, in fact, a map? there are lots of different types of maps of the same underlying earth—not just displaying different information (streets, topography, buildings), but different projections as well. the subway map does display our earthly terrain, but under a rather unorthodox projection.\nhow might we better understand this projection? by viewing satellite imagery of the city under it. i built this project to do that—hit the “transform!” button to see the mercator projection morph into the MTA projection.","richContent":"&lt;iframe width=&quot;400&quot; height=&quot;500&quot; src=&quot;https://jessie.grosen.systems/mta-projection/&quot;&gt;&lt;/iframe&gt;\n&lt;p&gt;&lt;a href=&quot;https://jessie.grosen.systems/mta-projection/&quot; class=&quot;external&quot;&gt;link to project&lt;svg class=&quot;external-icon&quot; viewBox=&quot;0 0 512 512&quot;&gt;&lt;path d=&quot;M320 0H288V64h32 82.7L201.4 265.4 178.7 288 224 333.3l22.6-22.6L448 109.3V192v32h64V192 32 0H480 320zM32 32H0V64 480v32H32 456h32V480 352 320H424v32 96H64V96h96 32V32H160 32z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;why is a &lt;em&gt;map&lt;/em&gt; different from a &lt;em&gt;diagram&lt;/em&gt;? i recently heard the MTA’s typical subway map described as a bit of a misnomer, because its lack of strict adherence to physical layout instead makes it a diagram.&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;../public-media/mta_subway_map.png&quot; width=&quot;400&quot; height=&quot;auto&quot; alt=&quot;&quot;&gt;&lt;/p&gt;\n&lt;p&gt;what if we stubbornly held that this is, in fact, a map? there are lots of different types of maps of the same underlying earth—not just displaying different information (streets, topography, buildings), but different &lt;em&gt;projections&lt;/em&gt; as well. the subway map does display our earthly terrain, but under a rather unorthodox projection.&lt;/p&gt;\n&lt;p&gt;how might we better understand this projection? by viewing satellite imagery of the city under it. i built this project to do that—hit the “transform!” button to see the mercator projection morph into the MTA projection.&lt;/p&gt;"},"talks/mustard-watches":{"title":"mustard watches","links":[],"tags":[],"content":"\ni gave a short talk on y j ringard’s famous 1990 paper “mustard watches: an integrated approach to time and food” at cmu plunch on march 4, 2022. i covered both the material in the original paper and some of the developments that have happened since. the slides follow:\n","richContent":"&lt;p&gt;&lt;img src=&quot;../public-media/IMG_1570.jpeg&quot; width=&quot;400&quot; height=&quot;auto&quot; alt=&quot;&quot;&gt;&lt;/p&gt;\n&lt;p&gt;i gave a short talk on y j ringard’s famous 1990 paper “mustard watches: an integrated approach to time and food” at cmu plunch on march 4, 2022. i covered both the material in the original paper and some of the developments that have happened since. the slides follow:&lt;/p&gt;\n&lt;p&gt;&lt;iframe style=&quot;width: 100%; aspect-ratio: 15.5 / 9&quot; src=&quot;../public-media/mustard-watches.pdf&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;"}}